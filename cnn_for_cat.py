# -*- coding: utf-8 -*-
"""CNN for cat.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dz6TVA1XGeRDHvWMlljvcQfs5RmAJeVi
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input, decode_predictions
from tensorflow.keras.applications import MobileNetV2

# Load the pre-trained MobileNetV2 model without the top layer
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Freeze the pre-trained layers
for layer in base_model.layers:
    layer.trainable = False

# Add new top layers for cat detection
x = base_model.output
x = tf.keras.layers.GlobalAveragePooling2D()(x)
x = tf.keras.layers.Dense(1024, activation='relu')(x)
x = tf.keras.layers.Dropout(0.5)(x)
predictions = tf.keras.layers.Dense(1, activation='sigmoid')(x)

# Create the final model
model = tf.keras.models.Model(inputs=base_model.input, outputs=predictions)

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Load weights (if you have saved weights)
# model.load_weights('cat_detection_weights.h5')

# Define a function to predict whether there is a cat in the image
def predict_cat(image_path):
    img = image.load_img(image_path, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)
    prediction = model.predict(img_array)
    return "Cat" if prediction[0][0] > 0.5 else "Not a cat"

# Example usage:
image_path = '/content/cat1.jpeg'  # Change this to the path of your image
result = predict_cat(image_path)
print("Prediction:", result)